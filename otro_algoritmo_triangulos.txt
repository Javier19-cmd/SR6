    """
     Este algoritmo se puede usar también.
    """
    # A.round()
    # B.round()
    # C.round()
    
    #print(random.uniform(0, 1))

    #print(col)

    # cols = color(
    #     random.uniform(0, 1),
    #     random.uniform(0, 1),
    #     random.uniform(0, 1),
    #     ) #Se manda a hacer el color con las utilidades y se setea el color.

    #c1.colorP = col #Se setea el color del punto.

    # c1.colorP = color(
    #     random.uniform(0, 1),
    #     random.uniform(0, 1),
    #     random.uniform(0, 1)
    # )

    # #print(c1.colorP)

    # #glLine(A, B)
    # #glLine(B, C)
    # #glLine(C, A)


    # if A.y > B.y: #Si el y de A es mayor al B de y, entonces se hace un cambio.
    #     A, B = B, A
    # if A.y > C.y: #Si el y de A es mayor al C de y, entonces se hace un cambio.
    #     A, C = C, A
    # if B.y > C.y: #So se el y de B es mayor al C de y, entonces se hace un cambio.
    #     B, C = C, B

    # #c1.colorP = color(0, 0, 1) #Se setea el color del punto.
    
    # #Calculando la pendiente de la línea que va de a a c.
    # dx_ac = C.x - A.x
    # dy_ac = C.y - A.y

    # if dy_ac == 0: #Evitando las divisiones por 0.
    #     return

    # mi_ac = dx_ac/dy_ac #Calculando la pendiente.

    # #Calculando la pendiente de la línea que va de a a b.
    # dx_ab = B.x - A.x
    # dy_ab = B.y - A.y

    # if dy_ab != 0: #Esto es para evitar que haya una división entre cero.

    #     mi_ab = dx_ab/dy_ab #Calculando la pendiente.

    #     #Primera mitad.
    #     for y in range(A.y, B.y + 1):
    #         xi = round(A.x - mi_ac * (A.y - y)) #Calculando el x inicial.
    #         xf = round(A.x - mi_ab * (A.y - y)) #Calculando el x final.

    #         if xi > xf: #Si el x inicial es mayor al x final, entonces se hace un cambio.
    #             xi, xf = xf, xi

    #         for x in range(xi, xf + 1): #Haciendo un for para dibujar las líneas.
    #             c1.Vertex(x, y) #Dibujando el punto.


    # #Calculando la pendiente de la línea que va de a a b.
    # dx_bc = C.x - B.x
    # dy_bc = C.y - B.y

    # if dy_bc != 0: #Esto es para evitar que haya una división entre cero.
    
    #     mi_bc = dx_bc/dy_bc #Calculando la pendiente.


    #     #Segunda mitad.
    #     for y in range(B.y, C.y + 1):
    #         xi = round(A.x - mi_ac * (A.y - y)) #Calculando el x inicial.
    #         xf = round(B.x - mi_bc * (B.y - y)) #Calculando el x final.

    #         if xi > xf: #Si el x inicial es mayor al x final, entonces se hace un cambio.
    #             xi, xf = xf, xi

    #         for x in range(xi, xf + 1): #Haciendo un for para dibujar las líneas.
    #             c1.Vertex(x, y) #Dibujando el punto.